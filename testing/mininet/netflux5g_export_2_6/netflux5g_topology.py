#!/usr/bin/env python

"""
NetFlux5G - Mininet-WiFi Topology
Generated by NetFlux5G Editor
Generated on: Sab Jul 26 17:35:01 2025
Docker Network: netflux5g

This script creates a network topology using mininet-wifi
with dynamic configuration from the NetFlux5G UI.

5G Configuration Files:
- Located in: ./5g-configs/ directory (relative to this script)
- Contains imported YAML configuration files for 5G core components
- Simplified naming scheme: {component_type}.yaml (e.g., upf.yaml, amf.yaml)
- Multiple instances: {component_type}_{index}.yaml (e.g., upf_2.yaml)
- Volume mounted as: /opt/open5gs/etc/open5gs/{component_type}.yaml inside containers
- Mount these configs into Docker containers as needed

Network Mode Configuration:
- All Docker components (UEs, gNBs, 5G Core) use the universal netflux5g network
- Database, WebUI, Monitoring, and Controller services also use netflux5g network
- Current network mode: netflux5g

Docker Network Usage:
- Network Name: netflux5g
- Type: Bridge network with attachable containers
- Create network: docker network create --driver bridge --attachable netflux5g
- Delete network: docker network rm netflux5g
"""

import sys
import os
import subprocess
from mininet.net import Mininet
from mininet.link import TCLink, Link, Intf
from mininet.node import RemoteController, OVSController, OVSKernelSwitch, Host, Node
from mininet.log import setLogLevel, info
from mn_wifi.node import Station, OVSKernelAP
from mn_wifi.link import wmediumd, Intf
from mn_wifi.wmediumdConnector import interference
from containernet.net import Containernet
from containernet.cli import CLI
from containernet.node import DockerSta
from containernet.term import makeTerm as makeTerm2
from subprocess import call


def sanitize_name(name):
    """Convert display name to valid Python variable name."""
    import re
    # Remove special characters and spaces
    clean_name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
    # Ensure it starts with a letter or underscore
    if clean_name and clean_name[0].isdigit():
        clean_name = '_' + clean_name
    return clean_name or 'node'

def get_5g_config_path(component_type, index=1):
    """Get path to 5G configuration file for a component type."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    # Use simplified naming scheme (0-based internally, 1-based for user)
    comp_type = component_type.lower()
    
    # Convert 1-based user index to 0-based internal index
    internal_index = index - 1
    
    if internal_index == 0:
        # First instance uses simple name: upf.yaml
        config_file = f"{comp_type}.yaml"
    else:
        # Additional instances use numbered names: upf_2.yaml (user index)
        config_file = f"{comp_type}_{index}.yaml"
    
    config_path = os.path.join(configs_dir, config_file)
    
    # Check if file exists, return path regardless
    return config_path

def list_5g_configs():
    """List all available 5G configuration files."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    if os.path.exists(configs_dir):
        import glob
        configs = glob.glob(os.path.join(configs_dir, "*.yaml"))
        configs.extend(glob.glob(os.path.join(configs_dir, "*.yml")))
        return [os.path.basename(c) for c in configs]
    else:
        return []

def check_5g_configs():
    """Check if required 5G configuration files exist and warn about missing files."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    configs_dir = os.path.join(script_dir, "5g-configs")
    
    if not os.path.exists(configs_dir):
        print("WARNING: 5g-configs directory not found!")
        print("Run the NetFlux5G automation to copy configuration files.")
        return False
    
    configs = list_5g_configs()
    if configs:
        print(f"Found {len(configs)} 5G configuration files:")
        for config in configs:
            print(f"  - {config}")
        return True
    else:
        print("WARNING: No 5G configuration files found in 5g-configs directory!")
        print("Import configuration files in VGcore component properties first.")
        return False

def check_docker_network():
    """Check if the required Docker network exists."""
    import subprocess
    network_name = "netflux5g"
    try:
        result = subprocess.run(
            ["docker", "network", "ls", "--filter", f"name={network_name}", "--format", "{{.Name}}"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            networks = result.stdout.strip().split('\n')
            return network_name in networks
        return False
    except Exception:
        return False

def create_docker_network_if_needed():
    """Create Docker network if it doesn't exist."""
    import subprocess
    network_name = "netflux5g"
    
    if check_docker_network():
        print(f"Docker network '{network_name}' already exists")
        return True
    
    print(f"Creating Docker network: {network_name}")
    try:
        result = subprocess.run(
            ["docker", "network", "create", "--driver", "bridge", "--attachable", network_name],
            capture_output=True, text=True, timeout=30
        )
        if result.returncode == 0:
            print(f"Successfully created Docker network: {network_name}")
            return True
        else:
            print(f"Failed to create Docker network: {result.stderr}")
            return False
    except Exception as e:
        print(f"Error creating Docker network: {e}")
        return False

def update_hosts(net):
    """
    Add all Mininet/Containernet nodes (hosts, Docker containers, stations)
    to each node's /etc/hosts file for name resolution.
    """
    # Gather all nodes that have a name, IP, and can run commands
    all_nodes = []
    for node in set(list(net.values()) + net.hosts + getattr(net, "stations", [])):
        if hasattr(node, "cmd") and hasattr(node, "name"):
            all_nodes.append(node)

    # Build unique entries: "IP name"
    entries = []
    seen = set()
    for node in all_nodes:
        try:
            ip = node.IP() if callable(getattr(node, "IP", None)) else getattr(node, "ip", None)
            if ip and ip != "127.0.0.1":
                entry = f"{ip} {node.name}"
                if entry not in seen:
                    entries.append(entry)
                    seen.add(entry)
        except Exception:
            continue

    # Update /etc/hosts for all nodes
    for node in all_nodes:
        try:
            node.cmd("sed -i '/# NetFlux5G entries/,/# End NetFlux5G entries/d' /etc/hosts")
            if entries:
                node.cmd("echo '# NetFlux5G entries' >> /etc/hosts")
                for entry in entries:
                    node.cmd(f"echo '{entry}' >> /etc/hosts")
                node.cmd("echo '# End NetFlux5G entries' >> /etc/hosts")
        except Exception:
            continue

export_dir = os.path.dirname(os.path.abspath(__file__))  # Current Working Directory

def topology(args):
    """Create network topology."""
    
    # Check for 5G configuration files
    info("*** Checking 5G configuration files\n")
    check_5g_configs()
    
    # Setup Docker network
    info("*** Setting up universal Docker network\n")
    create_docker_network_if_needed()
    
    # Universal network mode for all NetFlux5G components
    NETWORK_MODE = "netflux5g"
    info(f"*** Using universal Docker network: {NETWORK_MODE}\n")
    
    net = Containernet(topo=None,
                       build=False,
                       link=wmediumd, wmediumd_mode=interference,
                       ipBase='10.0.0.0/8')

    info("*** Adding controller\n")
    Controller__1 = net.addController(name='Controller__1',
                                   controller=RemoteController,
                                   ip='127.0.0.1',
                                   port=6653)

    info("*** Creating nodes\n")
    Switch__6 = net.addSwitch('Switch__6', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__5 = net.addSwitch('Switch__5', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__4 = net.addSwitch('Switch__4', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__3 = net.addSwitch('Switch__3', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__2 = net.addSwitch('Switch__2', cls=OVSKernelSwitch, protocols="OpenFlow13")
    Switch__1 = net.addSwitch('Switch__1', cls=OVSKernelSwitch, protocols="OpenFlow13")

    info("*** Add UPF (2 instances)\n")
    info("    Creating UPF instance 1/2: upf1\n")
    info("      Config file: upf.yaml\n")
    upf1 = net.addDocker('upf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/upf.yaml:/opt/open5gs/etc/open5gs/upf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("    Creating UPF instance 2/2: upf2\n")
    info("      Config file: upf_2.yaml\n")
    upf2 = net.addDocker('upf2', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/upf_2.yaml:/opt/open5gs/etc/open5gs/upf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add AMF (1 instances)\n")
    info("    Creating AMF instance 1/1: amf1\n")
    info("      Config file: amf.yaml\n")
    amf1 = net.addDocker('amf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/amf.yaml:/opt/open5gs/etc/open5gs/amf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0", "MCC=999", "MNC=70", "TAC=1", "SST=1", "SD=0xffffff", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add SMF (1 instances)\n")
    info("    Creating SMF instance 1/1: smf1\n")
    info("      Config file: smf.yaml\n")
    smf1 = net.addDocker('smf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/smf.yaml:/opt/open5gs/etc/open5gs/smf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=tcp:netflux5g-onos-controller:6653", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=secure", "OPENFLOW_PROTOCOLS=OpenFlow13", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6653", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add NRF (1 instances)\n")
    info("    Creating NRF instance 1/1: nrf1\n")
    info("      Config file: nrf.yaml\n")
    nrf1 = net.addDocker('nrf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/nrf.yaml:/opt/open5gs/etc/open5gs/nrf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add SCP (1 instances)\n")
    info("    Creating SCP instance 1/1: scp1\n")
    info("      Config file: scp.yaml\n")
    scp1 = net.addDocker('scp1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/scp.yaml:/opt/open5gs/etc/open5gs/scp.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add AUSF (1 instances)\n")
    info("    Creating AUSF instance 1/1: ausf1\n")
    info("      Config file: ausf.yaml\n")
    ausf1 = net.addDocker('ausf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/ausf.yaml:/opt/open5gs/etc/open5gs/ausf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add BSF (1 instances)\n")
    info("    Creating BSF instance 1/1: bsf1\n")
    info("      Config file: bsf.yaml\n")
    bsf1 = net.addDocker('bsf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/bsf.yaml:/opt/open5gs/etc/open5gs/bsf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add NSSF (1 instances)\n")
    info("    Creating NSSF instance 1/1: nssf1\n")
    info("      Config file: nssf.yaml\n")
    nssf1 = net.addDocker('nssf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/nssf.yaml:/opt/open5gs/etc/open5gs/nssf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add PCF (1 instances)\n")
    info("    Creating PCF instance 1/1: pcf1\n")
    info("      Config file: pcf.yaml\n")
    pcf1 = net.addDocker('pcf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/pcf.yaml:/opt/open5gs/etc/open5gs/pcf.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDM (1 instances)\n")
    info("    Creating UDM instance 1/1: udm1\n")
    info("      Config file: udm.yaml\n")
    udm1 = net.addDocker('udm1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/udm.yaml:/opt/open5gs/etc/open5gs/udm.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDR (1 instances)\n")
    info("    Creating UDR instance 1/1: udr1\n")
    info("      Config file: udr.yaml\n")
    udr1 = net.addDocker('udr1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:latest', position='-538.8,-717.4,0', volumes=[export_dir + "/5g-configs/udr.yaml:/opt/open5gs/etc/open5gs/udr.yaml", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], environment=["DB_URI=mongodb://netflux5g-mongodb/open5gs", "NETWORK_INTERFACE=eth0"])

    info("*** Adding gNB with enhanced OVS/AP support\n")
    GNB__1 = net.addDocker('GNB__1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, privileged=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=["/lib/modules:/lib/modules:ro", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], position='-682.1,226.6,0', txpower=26.0, environment={"AMF_HOSTNAME": "amf1", "GNB_HOSTNAME": "GNB__1", "N2_IFACE": "GNB__1-eth0", "N3_IFACE": "GNB__1-eth0", "RADIO_IFACE": "GNB__1-eth0", "NETWORK_INTERFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "UERANSIM_COMPONENT": "gnb", "OVS_ENABLED": "true", "OVS_BRIDGE_NAME": "", "OVS_FAIL_MODE": "secure", "OPENFLOW_PROTOCOLS": "OpenFlow13", "OVS_DATAPATH": "kernel", "BRIDGE_PRIORITY": "8", "STP_ENABLED": "true", "OVS_CONTROLLER": "tcp:netflux5g-onos-controller:6653", "AP_ENABLED": "true", "AP_SSID": "gnb-hotspot1", "AP_CHANNEL": "11", "AP_MODE": "g", "AP_PASSWD": "", "AP_FAILMODE": "secure", "AP_TXPOWER": "26"})
    ap101 = net.addAccessPoint('ap101', cls=OVSKernelAP, ssid='gnb-hotspot1', failMode='secure', datapath='kernel',
                             channel='11', mode='g', position='-682.1,226.6,0', txpower=26, protocols="OpenFlow13")

    GNB__2 = net.addDocker('GNB__2', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, privileged=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=["/lib/modules:/lib/modules:ro", export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], position='488.5,196.0,0', txpower=26.0, environment={"AMF_HOSTNAME": "amf1", "GNB_HOSTNAME": "GNB__2", "N2_IFACE": "GNB__2-eth0", "N3_IFACE": "GNB__2-eth0", "RADIO_IFACE": "GNB__2-eth0", "NETWORK_INTERFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "UERANSIM_COMPONENT": "gnb", "OVS_ENABLED": "true", "OVS_BRIDGE_NAME": "", "OVS_FAIL_MODE": "secure", "OPENFLOW_PROTOCOLS": "OpenFlow13", "OVS_DATAPATH": "kernel", "BRIDGE_PRIORITY": "6", "STP_ENABLED": "true", "OVS_CONTROLLER": "tcp:netflux5g-onos-controller:6653", "AP_ENABLED": "true", "AP_SSID": "gnb-hotspot2", "AP_CHANNEL": "6", "AP_MODE": "g", "AP_PASSWD": "", "AP_FAILMODE": "secure", "AP_TXPOWER": "26"})
    ap102 = net.addAccessPoint('ap102', cls=OVSKernelAP, ssid='gnb-hotspot2', failMode='secure', datapath='kernel',
                             channel='6', mode='g', position='488.5,196.0,0', txpower=26, protocols="OpenFlow13")

    info("*** Adding enhanced UERANSIM UE hosts\n")
    UE__6 = net.addStation('UE__6', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='685.1,535.7,0', environment={"GNB_HOSTNAME": "GNB__2", "APN": "internet", "MSISDN": "0000000003", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__6-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    UE__5 = net.addStation('UE__5', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='610.3,-167.3,0', environment={"GNB_HOSTNAME": "GNB__2", "APN": "internet2", "MSISDN": "0000000013", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__5-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    UE__4 = net.addStation('UE__4', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='174.9,129.4,0', environment={"GNB_HOSTNAME": "GNB__2", "APN": "internet2", "MSISDN": "0000000012", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__4-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    UE__3 = net.addStation('UE__3', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='-987.2,267.2,0', environment={"GNB_HOSTNAME": "GNB__1", "APN": "internet2", "MSISDN": "0000000011", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__3-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    UE__2 = net.addStation('UE__2', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='-772.2,-133.2,0', environment={"GNB_HOSTNAME": "GNB__1", "APN": "internet", "MSISDN": "0000000002", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__2-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})
    UE__1 = net.addStation('UE__1', devices=["/dev/net/tun"], cap_add=["net_admin"], network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', volumes=[export_dir + "/log/:/logging/", os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"], txpower=20.0, position='-535.2,537.5,0', environment={"GNB_HOSTNAME": "GNB__1", "APN": "internet", "MSISDN": "0000000001", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "UE__1-wlan0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false", "UERANSIM_COMPONENT": "ue", "OVS_ENABLED": "false"})

    info("*** Volume for capturing network interfaces\n")
    VolCap = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(export_dir))), "netflux5g-editor", "src", "automation", "webshark") + "/captures/:/captures/"
    print(f"    Volume for capturing network interfaces: {VolCap}\n")

    info("*** Capturing network interfaces\n")
    Capture = export_dir + "/capture.sh"
    
    # Make the script executable
    os.chmod(Capture, 0o755)
        
    # Execute the script in the background
    subprocess.Popen(["/bin/bash", Capture], 
                     stdout=subprocess.PIPE, 
                     stderr=subprocess.PIPE)
    

    info("*** Connecting Docker nodes to APs\n")
    # Dynamic UE-to-gNB/AP connection based on canvas positioning and coverage
    # Dynamic UE assignment to access points (traditional APs and gNB-APs) based on distance and coverage
    # Finding best access point for UE__6 at position (685.1, 535.7)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=1401.7m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=392.5m, range=600.0m
    # UE__6 -> GNB #2 (SSID: gnb-hotspot2, distance: 392.5m)
    # Finding best access point for UE__5 at position (610.3, -167.3)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=1351.1m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=383.2m, range=600.0m
    # UE__5 -> GNB #2 (SSID: gnb-hotspot2, distance: 383.2m)
    # Finding best access point for UE__4 at position (174.9, 129.4)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=862.5m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=320.6m, range=600.0m
    # UE__4 -> GNB #2 (SSID: gnb-hotspot2, distance: 320.6m)
    # Finding best access point for UE__3 at position (-987.2, 267.2)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=307.8m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=1477.4m, range=600.0m
    # UE__3 -> GNB #1 (SSID: gnb-hotspot1, distance: 307.8m)
    # Finding best access point for UE__2 at position (-772.2, -133.2)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=370.9m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=1303.0m, range=600.0m
    # UE__2 -> GNB #1 (SSID: gnb-hotspot1, distance: 370.9m)
    # Finding best access point for UE__1 at position (-535.2, 537.5)
    # GNB #1 (GNB) at (-682.1, 226.6): distance=343.9m, range=600.0m
    # GNB #2 (GNB) at (488.5, 196.0): distance=1079.2m, range=600.0m
    # UE__1 -> GNB #1 (SSID: gnb-hotspot1, distance: 343.9m)

    UE__6.cmd("iw dev UE__6-wlan0 connect gnb-hotspot2")
    UE__5.cmd("iw dev UE__5-wlan0 connect gnb-hotspot2")
    UE__4.cmd("iw dev UE__4-wlan0 connect gnb-hotspot2")
    UE__3.cmd("iw dev UE__3-wlan0 connect gnb-hotspot1")
    UE__2.cmd("iw dev UE__2-wlan0 connect gnb-hotspot1")
    UE__1.cmd("iw dev UE__1-wlan0 connect gnb-hotspot1")

    info("*** Configuring propagation model\n")
    net.setPropagationModel(model="logDistance", exp=3)

    info("*** Configuring nodes\n")
    net.configureWifiNodes()

    info("*** Creating links\n")
    # Link APs to gNBs
    net.addLink(ap101, GNB__1)
    net.addLink(ap102, GNB__2)
    
    net.addLink(Switch__1, Switch__6)
    net.addLink(Switch__6, Switch__2)
    net.addLink(Switch__5, Switch__6)
    net.addLink(Switch__5, Switch__2)
    net.addLink(Switch__4, Switch__5)
    net.addLink(Switch__4, amf1)
    net.addLink(Switch__4, upf1)
    net.addLink(Switch__4, upf2)
    net.addLink(Switch__4, smf1)
    net.addLink(Switch__3, amf1)
    net.addLink(Switch__3, upf1)
    net.addLink(Switch__3, upf2)
    net.addLink(Switch__3, smf1)
    net.addLink(Switch__3, Switch__4)
    net.addLink(Switch__1, Switch__3)
    net.addLink(Switch__4, Switch__1)
    net.addLink(Switch__4, Switch__2)
    net.addLink(Switch__1, Switch__2)
    net.addLink(Switch__2, ap102)
    net.addLink(Switch__1, ap101)

    if "-p" not in args:
        net.plotGraph(max_x=1000, max_y=1000)

    info("*** Starting network\n")
    net.build()
    Controller__1.start()

    info("*** Starting APs\n")
    net.get("ap101").start([Controller__1])
    net.get("ap102").start([Controller__1])

    net.get("Switch__6").start([Controller__1])
    net.get("Switch__5").start([Controller__1])
    net.get("Switch__4").start([Controller__1])
    net.get("Switch__3").start([Controller__1])
    net.get("Switch__2").start([Controller__1])
    net.get("Switch__1").start([Controller__1])

    update_hosts(net)

    info("*** Starting UPF components\n")
    upf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf1.log  &")
    upf2.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf2.log  &")

    info("*** Starting AMF components\n")
    amf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-amfd 2>&1 | tee -a /logging/amf1.log  &")

    info("*** Starting SMF components\n")
    smf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-smfd 2>&1 | tee -a /logging/smf1.log  &")

    info("*** Starting NSSF components\n")
    nssf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-nssfd 2>&1 | tee -a /logging/nssf1.log  &")

    info("*** Starting BSF components\n")
    bsf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-bsfd 2>&1 | tee -a /logging/bsf1.log  &")

    info("*** Starting PCF components\n")
    pcf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-pcfd 2>&1 | tee -a /logging/pcf1.log  &")

    info("*** Starting UDR components\n")
    udr1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-udrd 2>&1 | tee -a /logging/udr1.log  &")

    info("*** Starting UDM components\n")
    udm1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-udmd 2>&1 | tee -a /logging/udm1.log  &")

    info("*** Starting AUSF components\n")
    ausf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-ausfd 2>&1 | tee -a /logging/ausf1.log  &")

    info("*** Starting SCP components\n")
    scp1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-scpd 2>&1 | tee -a /logging/scp1.log  &")

    info("*** Starting NRF components\n")
    nrf1.cmd("setsid nohup /opt/open5gs/etc/open5gs/entrypoint.sh open5gs-nrfd 2>&1 | tee -a /logging/nrf1.log  &")

    CLI.do_sh(net, "sleep 10")

    info("*** Starting enhanced UERANSIM gNB with OVS/AP support\n")
    info("*** Pre-configuring OVS for gNB GNB__1\n")
    # OVS_ENABLED environment variable will trigger setup in entrypoint\n")
    GNB__1.cmd("setsid nohup /entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__1.log &")
    info("*** Pre-configuring OVS for gNB GNB__2\n")
    # OVS_ENABLED environment variable will trigger setup in entrypoint\n")
    GNB__2.cmd("setsid nohup /entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__2.log &")

    CLI.do_sh(net, "sleep 15")  # Allow time for gNB and OVS setup

    info("*** Starting enhanced UERANSIM UE nodes\n")
    UE__6.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__6.log &")
    UE__5.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__5.log &")
    UE__4.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__4.log &")
    UE__3.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__3.log &")
    UE__2.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__2.log &")
    UE__1.cmd("setsid nohup /entrypoint.sh ue 2>&1 | tee -a /logging/UE__1.log &")

    CLI.do_sh(net, "sleep 20")  # Allow time for UE registration and OVS setup

    info("*** Route traffic on UE for End-to-End and End-to-Edge Connection\n")
    UE__6.cmd("ip route add 10.100.0.0/16 dev uesimtun0")
    UE__5.cmd("ip route add 10.200.0.0/16 dev uesimtun0")
    UE__4.cmd("ip route add 10.200.0.0/16 dev uesimtun0")
    UE__3.cmd("ip route add 10.200.0.0/16 dev uesimtun0")
    UE__2.cmd("ip route add 10.100.0.0/16 dev uesimtun0")
    UE__1.cmd("ip route add 10.100.0.0/16 dev uesimtun0")

    info("*** Checking OVS status for enhanced UERANSIM components\n")
    CLI.do_sh(net, "sleep 5")  # Allow OVS setup to complete\n")
    makeTerm2(GNB__1, cmd="ovs-vsctl show || echo \"OVS not ready for GNB__1\"")
    makeTerm2(GNB__2, cmd="ovs-vsctl show || echo \"OVS not ready for GNB__2\"")

    info("*** Generating maximum load traffic on all UE devices\n")
    Capture2 = export_dir + "/generate-packet-maxload.sh"
    
    # Make the script executable
    os.chmod(Capture2, 0o755)
    
    # Execute the script in the background
    subprocess.Popen(["/bin/bash", Capture2], 
                     stdout=subprocess.PIPE, 
                     stderr=subprocess.PIPE)

    info("*** Running CLI\n")
    CLI(net)

    info("*** Stopping network\n")
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    topology(sys.argv)
