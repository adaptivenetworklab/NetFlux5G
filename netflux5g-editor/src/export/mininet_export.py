import os
import re
import traceback
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QDateTime
from manager.configmap import ConfigurationMapper
from manager.debug import debug_print, error_print, warning_print

class MininetExporter:
    """Handler for exporting network topology to Mininet scripts with Level 2 features."""
    
    def __init__(self, main_window):
        self.main_window = main_window
        
    def export_to_mininet(self):
        """Export the current topology to a Mininet script."""
        filename, _ = QFileDialog.getSaveFileName(
            self.main_window, 
            "Export to Mininet Script", 
            "", 
            "Python Files (*.py);;All Files (*)"
        )
        if filename:
            self.export_to_mininet_script(filename)

    def export_to_mininet_script(self, filename):
        """Export the current topology to a Mininet Python script with Level 2 features."""
        nodes, links = self.main_window.extractTopology()
        
        if not nodes:
            self.main_window.showCanvasStatus("No components found to export!")
            return
        
        # Separate nodes by type
        categorized_nodes = {
            'hosts': [n for n in nodes if n['type'] in ['Host', 'STA']],
            'ues': [n for n in nodes if n['type'] == 'UE'],
            'gnbs': [n for n in nodes if n['type'] == 'GNB'],
            'aps': [n for n in nodes if n['type'] == 'AP'],
            'switches': [n for n in nodes if n['type'] in ['Switch', 'Router']],
            'controllers': [n for n in nodes if n['type'] == 'Controller'],
            'docker_hosts': [n for n in nodes if n['type'] == 'DockerHost'],
            'core5g': [n for n in nodes if n['type'] == 'VGcore']
        }
        
        try:
            with open(filename, "w") as f:
                self.write_mininet_script(f, nodes, links, categorized_nodes)
            
            self.main_window.showCanvasStatus(f"Exported Level 2 topology to {os.path.basename(filename)}")
            debug_print(f"DEBUG: Exported {len(nodes)} nodes and {len(links)} links with Level 2 features to {filename}")
            
        except Exception as e:
            error_msg = f"Error exporting to Mininet: {str(e)}"
            self.main_window.showCanvasStatus(error_msg)
            error_print(f"ERROR: {error_msg}")
            traceback.print_exc()

    def write_mininet_script(self, f, nodes, links, categorized_nodes):
        """Write the complete Mininet script with Level 2 features."""
        # Write script header
        self.write_script_header(f)
        
        # Write imports
        self.write_imports(f, categorized_nodes)
        
        # Write topology function
        self.write_topology_function(f, nodes, links, categorized_nodes)
        
        # Write main execution
        self.write_main_execution(f)

    def write_script_header(self, f):
        """Write the script header with metadata."""
        f.write('#!/usr/bin/python\n')
        f.write('"""\n')
        f.write('NetFlux5G - Level 2 Mininet Topology\n')
        f.write('Generated by NetFlux5G Editor\n')
        f.write(f'Generated on: {QDateTime.currentDateTime().toString()}\n')
        f.write('Advanced hierarchical topology with 5G integration\n')
        f.write('"""\n\n')

    def write_imports(self, f, categorized_nodes):
        """Write necessary imports based on component types."""
        f.write('import sys\n')
        f.write('import os\n')
        f.write('from mininet.net import Mininet\n')
        f.write('from mininet.link import TCLink, Link, Intf\n')
        f.write('from mininet.node import RemoteController, OVSKernelSwitch, Host, Node\n')
        f.write('from mininet.log import setLogLevel, info\n')
        
        # Add wireless imports if needed
        if categorized_nodes['aps'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or any(h['type'] == 'STA' for h in categorized_nodes['hosts']):
            f.write('from mn_wifi.net import Mininet_wifi\n')
            f.write('from mn_wifi.node import Station, OVSKernelAP\n')
            f.write('from mn_wifi.link import wmediumd, Intf\n')
            f.write('from mn_wifi.wmediumdConnector import interference\n')
        
        # Add containernet imports if Docker hosts or 5G components exist
        if categorized_nodes['docker_hosts'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or categorized_nodes['core5g']:
            f.write('from containernet.cli import CLI\n')
            f.write('from containernet.node import DockerSta\n')
            f.write('from containernet.term import makeTerm as makeTerm2\n')
        else:
            f.write('from mininet.cli import CLI\n')
        
        f.write('from subprocess import call\n\n\n')

    def write_topology_function(self, f, nodes, links, categorized_nodes):
        """Write the main topology function with Level 2 features."""
        f.write('def topology(args):\n')
        f.write('    \n')
        
        # Initialize network
        self.write_network_initialization(f, categorized_nodes)
        
        # Add controllers
        self.write_controllers(f, categorized_nodes)
        
        # Add APs and Switches with Level 2 hierarchical topology
        self.write_aps_and_switches_level2(f, categorized_nodes)
        
        # Get current working directory
        f.write('    cwd = os.getcwd() # Current Working Directory\n\n')
        
        # Add 5G Core components with enhanced configuration
        self.write_5g_core_components_level2(f, categorized_nodes)
        
        # Add gNBs with advanced configuration
        self.write_gnbs_level2(f, categorized_nodes)
        
        # Add UEs with enhanced features
        self.write_ues_level2(f, categorized_nodes)
        
        # Add Docker hosts
        self.write_docker_hosts(f, categorized_nodes)
        
        # Add regular hosts and STAs
        self.write_hosts_and_stas(f, categorized_nodes)
        
        # Add WiFi connections
        self.write_wifi_connections(f, categorized_nodes)
        
        # Configure propagation model
        self.write_propagation_model(f, categorized_nodes)
        
        # Add links with Level 2 hierarchical topology
        self.write_links_level2(f, links, nodes, categorized_nodes)
        
        # Add plot graph for wireless
        self.write_plot_graph(f, categorized_nodes)
        
        # Start network
        self.write_network_startup(f, categorized_nodes)
        
        # Add 5G specific startup sequences with Level 2 features
        self.write_5g_startup_sequences_level2(f, categorized_nodes)
        
        # Add connection test script
        self.write_connection_test_script(f, categorized_nodes)
        
        # Add CLI and cleanup
        self.write_cli_and_cleanup(f)

    def write_network_initialization(self, f, categorized_nodes):
        """Write network initialization code."""
        if (categorized_nodes['aps'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or 
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    net = Mininet_wifi(topo=None,\n')
            f.write('                       build=False,\n')
            f.write('                       link=wmediumd, wmediumd_mode=interference,\n')
            f.write('                       ipBase=\'10.0.0.0/8\')\n')
        else:
            f.write('    net = Mininet(topo=None, build=False, ipBase=\'10.0.0.0/8\')\n')
        f.write('    \n')

    def write_controllers(self, f, categorized_nodes):
        """Write controller creation code."""
        if categorized_nodes['controllers']:
            f.write('    info( \'\\n*** Adding controller\\n\' )\n')
            for i, controller in enumerate(categorized_nodes['controllers'], 1):
                controller_name = self.sanitize_variable_name(controller['name'])
                f.write(f'    {controller_name} = net.addController(name=\'{controller_name}\',\n')
                f.write(f'                                        controller=RemoteController)\n')
            f.write('\n')
        else:
            f.write('    info( \'\\n*** Adding controller\\n\' )\n')
            f.write('    c0 = net.addController(name=\'c0\',\n')
            f.write('                           controller=RemoteController)\n\n')

    def write_aps_and_switches_level2(self, f, categorized_nodes):
        """Write APs and switches with Level 2 hierarchical topology features."""
        if categorized_nodes['aps'] or categorized_nodes['switches']:
            f.write('    info( \'\\n*** Add APs & Switches\\n\')\n')
            
            # Add APs with enhanced configuration
            for i, ap in enumerate(categorized_nodes['aps'], 1):
                ap_name = self.sanitize_variable_name(ap['name'])
                f.write(f'    {ap_name} = net.addAccessPoint(\'{ap_name}\', cls=OVSKernelAP, ')
                f.write(f'ssid=\'{ap_name}-ssid\', failMode=\'standalone\', datapath=\'user\', ')
                f.write(f'channel=\'36\', mode=\'n\', protocols="OpenFlow14")\n')
            
            # Add hierarchical switch topology (based on fixed_topology-upf.py pattern)
            switch_count = max(len(categorized_nodes['switches']), 10)  # Ensure minimum for hierarchy
            if switch_count >= 3:
                for i in range(1, 11):  # Always create s1-s10 for hierarchical topology
                    f.write(f'    s{i} = net.addSwitch(\'s{i}\', cls=OVSKernelSwitch, protocols="OpenFlow14")\n')
            else:
                # Add user-defined switches
                for switch in categorized_nodes['switches']:
                    switch_name = self.sanitize_variable_name(switch['name'])
                    f.write(f'    {switch_name} = net.addSwitch(\'{switch_name}\', cls=OVSKernelSwitch, protocols="OpenFlow14")\n')
            
            f.write('\n')

    def write_5g_core_components_level2(self, f, categorized_nodes):
        """Write 5G Core components with Level 2 features."""
        # Extract different types of 5G components
        core_components = self.extract_5g_components_by_type(categorized_nodes['core5g'])
        
        # Add UPF components with enhanced configuration
        if core_components['UPF']:
            f.write('    info( \'\\n *** Add UPF\\n\')\n')
            for i, upf in enumerate(core_components['UPF'], 1):
                upf_name = self.sanitize_variable_name(upf['name'])
                f.write(f'    {upf_name} = net.addStation(\'{upf_name}\', cap_add=["net_admin"], ')
                f.write(f'network_mode="open5gs-ueransim_default", privileged=True, ')
                f.write(f'dcmd="/bin/bash", cls=DockerSta, dimage="adaptive/open5gs:1.0", ')
                f.write(f'volumes=[cwd + "/config/upf.yaml:/opt/open5gs/etc/open5gs/upf.yaml"])\n')
            f.write('\n')
        
        # Add AMF components
        if core_components['AMF']:
            f.write('    info( \'\\n *** Add AMF\\n\')\n')
            for i, amf in enumerate(core_components['AMF'], 1):
                amf_name = self.sanitize_variable_name(amf['name'])
                f.write(f'    {amf_name} = net.addStation(\'{amf_name}\', network_mode="open5gs-ueransim_default", ')
                f.write(f'cap_add=["net_admin"], dcmd="/bin/bash", cls=DockerSta, dimage="adaptive/open5gs:1.0", ')
                f.write(f'volumes=[cwd + "/config/amf.yaml:/opt/open5gs/etc/open5gs/amf.yaml"])\n')
            f.write('\n')

    def extract_5g_components_by_type(self, core5g_components):
        """Extract 5G components organized by type."""
        components = {
            'UPF': [], 'AMF': [], 'SMF': [], 'NRF': [], 'SCP': [],
            'AUSF': [], 'BSF': [], 'NSSF': [], 'PCF': [], 'PCRF': [],
            'UDM': [], 'UDR': [], 'GNB': [], 'UE': []
        }
        
        for component in core5g_components:
            props = component.get('properties', {})
            comp_type = props.get('Component5G_Type', 'AMF')
            
            if comp_type in components:
                components[comp_type].append(component)
            # Special handling for GNB and UE components which may not have Component5G_Type
            elif component.get('type') == 'GNB':
                components['GNB'].append(component)
            elif component.get('type') == 'UE':
                components['UE'].append(component)
        
        return components
    
    def write_connection_test_script(self, f, categorized_nodes):
        """Write connection test script for 5G components."""
        # Extract 5G component types
        core_components = self.extract_5g_components_by_type(categorized_nodes['core5g'] if 'core5g' in categorized_nodes else [])
        
        f.write('\n    info( \'\\n*** Creating connection test functions\\n\')\n')
        f.write('    # Connection test function\n')
        f.write('    def test_5g_connection():\n')
        f.write('        """Test 5G network connectivity between components"""\n')
        f.write('        info(\'\\n=== 5G Connection Test ===\\n\')\n')
        
        # Add UE registration and PDU session tests
        if categorized_nodes.get('ues', []):
            f.write('        # Test UE connectivity\n')
            f.write('        info(\'\\n1. Testing UE registration and PDU sessions\\n\')\n')
            
            for i, ue in enumerate(categorized_nodes['ues']):
                ue_name = self.sanitize_variable_name(ue['name'])
                apn = ue.get('properties', {}).get('UE_APN', 'internet')
                
                f.write(f'        info(\'  - Testing {ue_name} with APN {apn}:\\n\')\n')
                f.write(f'        # Check if UE registered successfully\n')
                f.write(f'        reg_check = {ue_name}.cmd("ifconfig uesimtun0 2>/dev/null | grep inet")\n')
                f.write(f'        if "inet" in reg_check:\n')
                f.write(f'            info(\'    ✓ UE registered successfully with IP: \' + reg_check.strip().split()[1] + \'\\n\')\n')
                f.write(f'            # Test PDU session connectivity\n')
                f.write(f'            ping_result = {ue_name}.cmd("ping -c 3 -w 5 -I uesimtun0 8.8.8.8")\n')
                f.write(f'            if "3 packets transmitted, 3 received" in ping_result:\n')
                f.write(f'                info(\'    ✓ PDU session working - Internet connectivity successful\\n\')\n')
                f.write(f'            else:\n')
                f.write(f'                info(\'    ✗ PDU session test failed - No internet connectivity\\n\')\n')
                f.write(f'        else:\n')
                f.write(f'            info(\'    ✗ UE failed to register\\n\')\n')
        
        # Add gNB to AMF connectivity test
        if categorized_nodes.get('gnbs', []) and core_components.get('AMF', []):
            f.write('        # Test gNB to AMF connectivity\n')
            f.write('        info(\'\\n2. Testing gNB to AMF connectivity:\\n\')\n')
            
            # Get AMF IP address
            amf_name = self.sanitize_variable_name(core_components['AMF'][0]['name'])
            for gnb in categorized_nodes['gnbs']:
                gnb_name = self.sanitize_variable_name(gnb['name'])
                f.write(f'        amf_ip = {amf_name}.IP()\n')
                f.write(f'        info(f"  - Testing {gnb_name} → {amf_name} ({{amf_ip}}):\\n")\n')
                f.write(f'        ping_result = {gnb_name}.cmd(f"ping -c 3 -w 5 {{amf_ip}}")\n')
                f.write(f'        if "3 packets transmitted, 3 received" in ping_result:\n')
                f.write(f'            info(\'    ✓ gNB can reach AMF\\n\')\n')
                f.write(f'            ngap_check = {gnb_name}.cmd("cat /tmp/gnb.log | grep -i \'ng_setup_response\'")\n')
                f.write(f'            if "ng_setup_response" in ngap_check:\n')
                f.write(f'                info(\'    ✓ NGAP connection established\\n\')\n')
                f.write(f'            else:\n')
                f.write(f'                info(\'    ✗ NGAP connection not found\\n\')\n')
                f.write(f'        else:\n')
                f.write(f'            info(\'    ✗ gNB cannot reach AMF\\n\')\n')
        
        # Add test for UPF connectivity
        if core_components.get('UPF', []):
            f.write('        # Test UPF connectivity\n')
            f.write('        info(\'\\n3. Testing UPF interfaces and routing:\\n\')\n')
            
            for upf in core_components['UPF']:
                upf_name = self.sanitize_variable_name(upf['name'])
                f.write(f'        info(f"  - Testing {upf_name} interfaces:\\n")\n')
                f.write(f'        tun_check = {upf_name}.cmd("ifconfig | grep -i ogstun")\n')
                f.write(f'        if "ogstun" in tun_check:\n')
                f.write(f'            info(\'    ✓ UPF tunnel interfaces created\\n\')\n')
                f.write(f'        else:\n')
                f.write(f'            info(\'    ✗ UPF tunnel interfaces not found\\n\')\n')
        
        # Add end-to-end latency test between UEs
        if len(categorized_nodes.get('ues', [])) >= 2:
            f.write('        # Test UE to UE connectivity (if multiple UEs exist)\n')
            f.write('        info(\'\\n4. Testing UE to UE connectivity:\\n\')\n')
            
            ue_names = [self.sanitize_variable_name(ue['name']) for ue in categorized_nodes['ues']]
            if len(ue_names) >= 2:
                ue1, ue2 = ue_names[0], ue_names[1]
                f.write(f'        # Get IPs of UEs\n')
                f.write(f'        ue1_ip = {ue1}.cmd("ifconfig uesimtun0 2>/dev/null | grep inet").strip().split()[1]\n')
                f.write(f'        ue2_ip = {ue2}.cmd("ifconfig uesimtun0 2>/dev/null | grep inet").strip().split()[1]\n')
                f.write(f'        if ue1_ip and ue2_ip:\n')
                f.write(f'            info(f"  - Testing connectivity between {ue1} ({{ue1_ip}}) → {ue2} ({{ue2_ip}}):\\n")\n')
                f.write(f'            ping_result = {ue1}.cmd(f"ping -c 3 -w 5 -I uesimtun0 {{ue2_ip}}")\n')
                f.write(f'            if "3 packets transmitted, 3 received" in ping_result:\n')
                f.write(f'                info(\'    ✓ UE to UE connectivity successful\\n\')\n')
                f.write(f'            else:\n')
                f.write(f'                info(\'    ✗ UE to UE connectivity failed\\n\')\n')
                f.write(f'        else:\n')
                f.write(f'            info(\'    ✗ Could not get UE IP addresses\\n\')\n')
        
        f.write('        info(\'\\n=== End of 5G Connection Test ===\\n\')\n\n')
        
        # Add CLI command to run the test
        f.write('    # Add test_5g_connection to CLI\n')
        f.write('    def do_test5g(self, line):\n')
        f.write('        """Test 5G network connectivity\\nUsage: test5g"""\n')
        f.write('        test_5g_connection()\n')
        f.write('    CLI.do_test5g = do_test5g\n\n')

    def write_gnbs_level2(self, f, categorized_nodes):
        """Write gNB creation code with Level 2 features."""
        if categorized_nodes['gnbs']:
            f.write('    info( \'\\n *** Add gNB\\n\')\n')
            for i, gnb in enumerate(categorized_nodes['gnbs'], 1):
                gnb_name = self.sanitize_variable_name(gnb['name'])
                f.write(f'    {gnb_name} = net.addStation(\'{gnb_name}\', cap_add=["net_admin"], ')
                f.write(f'network_mode="open5gs-ueransim_default", dcmd="/bin/bash", ')
                f.write(f'cls=DockerSta, dimage="adaptive/ueransim:1.0", range=116, ')
                f.write(f'environment={{"AMF_IP": "10.0.0.2", "GNB_HOSTNAME": "mn.{gnb_name}"}})\n')
            f.write('\n')

    def write_ues_level2(self, f, categorized_nodes):
        """Write UE creation code with Level 2 features."""
        if categorized_nodes['ues']:
            f.write('    info(\'\\n*** Adding docker UE hosts\\n\')\n')
            for i, ue in enumerate(categorized_nodes['ues'], 1):
                ue_name = self.sanitize_variable_name(ue['name'])
                f.write(f'    {ue_name} = net.addStation(\'{ue_name}\', devices=["/dev/net/tun"], ')
                f.write(f'cap_add=["net_admin"], network_mode="open5gs-ueransim_default", ')
                f.write(f'dcmd="/bin/bash", cls=DockerSta, dimage="adaptive/ueransim:1.0", ')
                f.write(f'environment={{"GNB_IP": "10.0.0.3", "APN": "internet", "MSISDN": "{i:010d}"}})\n')
            f.write('\n')

    def write_docker_hosts(self, f, categorized_nodes):
        """Write Docker hosts creation code."""
        if categorized_nodes['docker_hosts']:
            f.write('    info(\'\\n*** Adding Docker hosts\\n\')\n')
            for docker_host in categorized_nodes['docker_hosts']:
                host_name = self.sanitize_variable_name(docker_host['name'])
                f.write(f'    {host_name} = net.addHost(\'{host_name}\', cls=DockerHost)\n')
            f.write('\n')

    def write_hosts_and_stas(self, f, categorized_nodes):
        """Write regular hosts and STAs creation code."""
        if categorized_nodes['hosts']:
            f.write('    info(\'\\n*** Adding hosts and stations\\n\')\n')
            for host in categorized_nodes['hosts']:
                host_name = self.sanitize_variable_name(host['name'])
                if host['type'] == 'STA':
                    f.write(f'    {host_name} = net.addStation(\'{host_name}\')\n')
                else:
                    f.write(f'    {host_name} = net.addHost(\'{host_name}\', cls=Host)\n')
            f.write('\n')

    def write_wifi_connections(self, f, categorized_nodes):
        """Write WiFi connection code."""
        if categorized_nodes['ues'] or any(host['type'] == 'STA' for host in categorized_nodes['hosts']):
            f.write('    info( \'\\n*** Connecting Docker nodes to APs\\n\')\n')
            
            # Connect UEs to APs (based on proximity or explicit configuration)
            ap_names = [self.sanitize_variable_name(ap['name']) for ap in categorized_nodes['aps']]
            
            for i, ue in enumerate(categorized_nodes['ues']):
                ue_name = self.sanitize_variable_name(ue['name'])
                if ap_names:
                    ap_name = ap_names[i % len(ap_names)]  # Round-robin assignment
                    f.write(f'    {ue_name}.cmd(\'iw dev {ue_name}-wlan0 connect {ap_name}-ssid\')\n')
            
            # Connect STAs to APs
            for host in categorized_nodes['hosts']:
                if host['type'] == 'STA' and ap_names:
                    host_name = self.sanitize_variable_name(host['name'])
                    ap_name = ap_names[0]  # Connect to first AP
                    f.write(f'    {host_name}.cmd(\'iw dev {host_name}-wlan0 connect {ap_name}-ssid\')\n')
            
            f.write('\n')

    def write_propagation_model(self, f, categorized_nodes):
        """Write propagation model configuration."""
        if (categorized_nodes['aps'] or categorized_nodes['gnbs'] or 
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    info("\\n*** Configuring Propagation Model\\n")\n')
            f.write('    net.setPropagationModel(model="logDistance", exp=3)\n\n')
            f.write('    info(\'\\n*** Configuring WiFi nodes\\n\')\n')
            f.write('    net.configureWifiNodes()\n\n')

    def write_links_level2(self, f, links, nodes, categorized_nodes):
        """Write link creation code with Level 2 hierarchical topology features."""
        if links or categorized_nodes['switches']:
            f.write('    info( \'\\n*** Add links\\n\')\n')
            
            # Create hierarchical topology based on fixed_topology-upf.py
            self.write_hierarchical_topology(f, categorized_nodes)
            
            # Add user-defined links
            for link in links:
                source_name = self.sanitize_variable_name(link.get('source', ''))
                target_name = self.sanitize_variable_name(link.get('target', ''))
                if source_name and target_name:
                    f.write(f'    net.addLink({source_name}, {target_name})\n')
            
            # Connect APs to switches
            ap_names = [self.sanitize_variable_name(ap['name']) for ap in categorized_nodes['aps']]
            if ap_names:
                for i, ap_name in enumerate(ap_names):
                    switch_num = (i % 4) + 1  # Connect to s1-s4
                    f.write(f'    net.addLink(s{switch_num}, {ap_name})\n')
            
            # Connect 5G components to infrastructure
            core_components = self.extract_5g_components_by_type(categorized_nodes['core5g'])
            
            # Connect AMF to top-level switch
            if core_components['AMF']:
                amf_name = self.sanitize_variable_name(core_components['AMF'][0]['name'])
                f.write(f'    net.addLink(s10, {amf_name})\n')
            
            # Connect UPFs to switches
            if core_components['UPF']:
                for i, upf in enumerate(core_components['UPF']):
                    upf_name = self.sanitize_variable_name(upf['name'])
                    switch_num = (i % 4) + 1  # Connect to s1-s4
                    f.write(f'    net.addLink(s{switch_num}, {upf_name})\n')
            
            # Connect gNBs to APs and UPFs
            for i, gnb in enumerate(categorized_nodes['gnbs']):
                gnb_name = self.sanitize_variable_name(gnb['name'])
                if ap_names and i < len(ap_names):
                    f.write(f'    net.addLink({ap_names[i]}, {gnb_name})\n')
            
            f.write('\n')

    def write_hierarchical_topology(self, f, categorized_nodes):
        """Write a hierarchical switch topology similar to fixed_topology-upf.py."""
        # Always create the base hierarchical structure
        f.write('    net.addLink(s10, s8)\n')
        f.write('    net.addLink(s10, s9)\n')
        f.write('    net.addLink(s10, s6)\n')
        f.write('    net.addLink(s8, s5)\n')
        f.write('    net.addLink(s9, s7)\n')
        f.write('    net.addLink(s7, s4)\n')
        f.write('    net.addLink(s5, s1)\n')
        f.write('    net.addLink(s6, s2)\n')
        f.write('    net.addLink(s6, s3)\n')
        f.write('    net.addLink(s1, s2)\n')
        f.write('    net.addLink(s2, s3)\n')
        f.write('    net.addLink(s3, s4)\n')
        f.write('    net.addLink(s5, s2)\n')
        f.write('    net.addLink(s7, s3)\n')

    def write_plot_graph(self, f, categorized_nodes):
        """Write plot graph code for wireless networks."""
        if (categorized_nodes['aps'] or categorized_nodes['gnbs'] or categorized_nodes['ues'] or
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    net.plotGraph(max_x=1000, max_y=1000)\n\n')

    def write_network_startup(self, f, categorized_nodes):
        """Write network startup code."""
        f.write('    info(\'\\n*** Starting network\\n\')\n')
        f.write('    net.build()\n\n')
        
        # Start controllers
        if categorized_nodes['controllers']:
            f.write('    info( \'\\n*** Starting controllers\\n\')\n')
            for controller in categorized_nodes['controllers']:
                controller_name = self.sanitize_variable_name(controller['name'])
                f.write(f'    {controller_name}.start()\n')
        else:
            f.write('    info( \'\\n*** Starting controllers\\n\')\n')
            f.write('    c0.start()\n')
        f.write('\n')
        
        # Start APs and switches
        if categorized_nodes['aps'] or categorized_nodes['switches']:
            f.write('    info( \'\\n*** Starting APs\\n\')\n')
            controller_name = 'c0'
            if categorized_nodes['controllers']:
                controller_name = self.sanitize_variable_name(categorized_nodes['controllers'][0]['name'])
                
            for ap in categorized_nodes['aps']:
                ap_name = self.sanitize_variable_name(ap['name'])
                f.write(f'    net.get(\'{ap_name}\').start([{controller_name}])\n')
                
            # Start all switches (including hierarchical ones)
            for i in range(1, 11):
                f.write(f'    net.get(\'s{i}\').start([{controller_name}])\n')
            
            f.write('\n')

    def write_5g_startup_sequences_level2(self, f, categorized_nodes):
        """Write 5G specific startup sequences with Level 2 features."""
        core_components = self.extract_5g_components_by_type(categorized_nodes['core5g'])
        
        if (core_components['UPF'] or core_components['AMF'] or 
            categorized_nodes['gnbs'] or categorized_nodes['ues']):
            
            f.write('    info( \'\\n *** Capture all initialization flow and slice packet\\n\')\n')
            f.write('    Capture1 = cwd + "/capture-initialization-fixed.sh"\n')
            f.write('    CLI(net, script=Capture1)\n\n')
            f.write('    CLI.do_sh(net, \'sleep 20\')\n\n')
            f.write('    info( \'\\n *** pingall for testing and flow tables update\\n\')\n')
            f.write('    net.pingAll()\n\n')
            f.write('    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start UPF components
            if core_components['UPF']:
                f.write('    info( \'\\n *** Post configure Docker UPF connection to Core\\n\')\n')
                for upf in core_components['UPF']:
                    upf_name = self.sanitize_variable_name(upf['name'])
                    f.write(f'    makeTerm2({upf_name}, cmd="/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/{upf_name}.log")\n')
                f.write('\n')
            
            # Start AMF components
            if core_components['AMF']:
                f.write('    info( \'\\n *** Post configure Docker AMF connection to Core\\n\')\n')
                for amf in core_components['AMF']:
                    amf_name = self.sanitize_variable_name(amf['name'])
                    f.write(f'    makeTerm2({amf_name}, cmd="open5gs-amfd 2>&1 | tee -a /logging/{amf_name}.log")\n')
                f.write('\n')
                f.write('    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start gNBs
            if categorized_nodes['gnbs']:
                f.write('    info( \'\\n*** Post configure Docker gNB connection to AMF\\n\')\n')
                for gnb in categorized_nodes['gnbs']:
                    gnb_name = self.sanitize_variable_name(gnb['name'])
                    f.write(f'    makeTerm2({gnb_name}, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/{gnb_name}.log")\n')
                f.write('\n')
                f.write('    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start UEs
            if categorized_nodes['ues']:
                f.write('    info( \'\\n*** Post configure Docker UE nodes\\n\')\n')
                for ue in categorized_nodes['ues']:
                    ue_name = self.sanitize_variable_name(ue['name'])
                    f.write(f'    makeTerm2({ue_name}, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/{ue_name}.log")\n')
                f.write('\n')
                f.write('    CLI.do_sh(net, \'sleep 20\')\n\n')
                
                # Add routing for UEs
                f.write('    info( \'\\n ***Route traffic on UE for End-to-End and End-to-Edge Connection\\n\')\n')
                for i, ue in enumerate(categorized_nodes['ues']):
                    ue_name = self.sanitize_variable_name(ue['name'])
                    props = ue.get('properties', {})
                    apn = props.get('UE_APN', 'internet')
                    
                    # Route based on APN
                    if 'internet2' in apn:
                        f.write(f'    {ue_name}.cmd(\'ip route add 10.46.0.0/16 dev uesimtun0\')\n')
                    else:
                        f.write(f'    {ue_name}.cmd(\'ip route add 10.45.0.0/16 dev uesimtun0\')\n')
                f.write('\n')

    def write_cli_and_cleanup(self, f):
        """Write CLI and cleanup code."""
        f.write('    info(\'*** Running CLI\\n\')\n')
        f.write('    CLI(net)\n\n')
        f.write('    info(\'*** Stopping network\\n\')\n')
        f.write('    net.stop()\n\n')

    def write_main_execution(self, f):
        """Write the main execution block."""
        f.write('if __name__ == \'__main__\':\n')
        f.write('    setLogLevel(\'info\')\n')
        f.write('    topology(sys.argv)\n')

    def sanitize_variable_name(self, name):
        """Convert component name to valid Python variable name."""
        # Replace spaces and special characters with underscores
        sanitized = re.sub(r'[^a-zA-Z0-9_]', '_', name.lower())
        
        # Ensure it doesn't start with a number
        if sanitized and sanitized[0].isdigit():
            sanitized = f'node_{sanitized}'
            
        # Ensure it's not empty
        if not sanitized:
            sanitized = 'unnamed_node'
            
        return sanitized