import os
import re
import json
import traceback
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import QDateTime
from .config_mapping import ConfigurationMapper
from .debug_manager import debug_print, error_print, warning_print

class MininetExporter:
    """Handler for exporting network topology to Mininet scripts."""
    
    def __init__(self, main_window):
        self.main_window = main_window
        
    def export_to_mininet(self):
        """Export the current topology to a Mininet script."""
        filename, _ = QFileDialog.getSaveFileName(
            self.main_window, 
            "Export to Mininet Script", 
            "", 
            "Python Files (*.py);;All Files (*)"
        )
        if filename:
            self.export_to_mininet_script(filename)

    def export_to_mininet_script(self, filename):
        """Export the current topology to a Mininet Python script with component configurations."""
        nodes, links = self.main_window.extractTopology()
        
        if not nodes:
            self.main_window.showCanvasStatus("No components found to export!")
            return
        
        # Separate nodes by type
        hosts = [n for n in nodes if n['type'] in ['Host', 'STA']]
        ues = [n for n in nodes if n['type'] == 'UE']
        gnbs = [n for n in nodes if n['type'] == 'GNB']
        aps = [n for n in nodes if n['type'] == 'AP']
        switches = [n for n in nodes if n['type'] in ['Switch', 'Router']]
        controllers = [n for n in nodes if n['type'] == 'Controller']
        docker_hosts = [n for n in nodes if n['type'] == 'DockerHost']
        core5g = [n for n in nodes if n['type'] == 'VGcore']
        
        try:
            with open(filename, "w") as f:
                self.write_mininet_script(f, nodes, links, {
                    'hosts': hosts,
                    'ues': ues,
                    'gnbs': gnbs,
                    'aps': aps,
                    'switches': switches,
                    'controllers': controllers,
                    'docker_hosts': docker_hosts,
                    'core5g': core5g
                })
            
            self.main_window.showCanvasStatus(f"Exported topology with configurations to {os.path.basename(filename)}")
            debug_print(f"DEBUG: Exported {len(nodes)} nodes and {len(links)} links with configurations to {filename}")
            
        except Exception as e:
            error_msg = f"Error exporting to Mininet: {str(e)}"
            self.main_window.showCanvasStatus(error_msg)
            error_print(f"ERROR: {error_msg}")
            traceback.print_exc()

    def write_mininet_script(self, f, nodes, links, categorized_nodes):
        """Write the complete Mininet script to file using the enhanced structure."""
        # Write script header
        self.write_script_header(f)
        
        # Write imports
        self.write_imports(f, categorized_nodes)
        
        # Write topology function
        self.write_topology_function(f, nodes, links, categorized_nodes)
        
        # Write main execution
        self.write_main_execution(f)

    def write_script_header(self, f):
        """Write the script header with metadata."""
        f.write('#!/usr/bin/python\n')
        f.write('"""\n')
        f.write('Mininet topology generated by NetFlux5G Editor\n')
        f.write(f'Generated on: {QDateTime.currentDateTime().toString()}\n')
        f.write('"""\n\n')

    def write_imports(self, f, categorized_nodes):
        """Write necessary imports based on component types."""
        f.write('import sys\n')
        f.write('import os\n')
        f.write('from mininet.net import Mininet\n')
        f.write('from mininet.link import TCLink, Link, Intf\n')
        f.write('from mininet.node import RemoteController, OVSKernelSwitch, Host, Node\n')
        f.write('from mininet.log import setLogLevel, info\n')
        
        # Add wireless imports if needed
        if categorized_nodes['aps'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or any(h['type'] == 'STA' for h in categorized_nodes['hosts']):
            f.write('from mn_wifi.net import Mininet_wifi\n')
            f.write('from mn_wifi.node import Station, OVSKernelAP\n')
            f.write('from mn_wifi.link import wmediumd, Intf\n')
            f.write('from mn_wifi.wmediumdConnector import interference\n')
        
        # Add containernet imports if Docker hosts or 5G components exist
        if categorized_nodes['docker_hosts'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or categorized_nodes['core5g']:
            f.write('from containernet.cli import CLI\n')
            f.write('from containernet.node import DockerSta\n')
            f.write('from containernet.term import makeTerm as makeTerm2\n')
        else:
            f.write('from mn_wifi.cli import CLI\n')
        
        f.write('from subprocess import call\n\n\n')

    def write_topology_function(self, f, nodes, links, categorized_nodes):
        """Write the main topology function."""
        f.write('def topology(args):\n')
        f.write('    \n')
        
        # Initialize network
        self.write_network_initialization(f, categorized_nodes)
        
        # Add controllers
        self.write_controllers(f, categorized_nodes)
        
        # Add APs and Switches
        self.write_aps_and_switches(f, categorized_nodes)
        
        # Get current working directory
        f.write('    cwd = os.getcwd() # Current Working Directory\n\n')
        
        # Add 5G Core components
        self.write_5g_core_components(f, categorized_nodes)
        
        # Add gNBs
        self.write_gnbs(f, categorized_nodes)
        
        # Add UEs
        self.write_ues(f, categorized_nodes)
        
        # Add Docker hosts
        self.write_docker_hosts(f, categorized_nodes)
        
        # Add regular hosts and STAs
        self.write_hosts_and_stas(f, categorized_nodes)
        
        # Add WiFi connections
        self.write_wifi_connections(f, categorized_nodes)
        
        # Configure propagation model
        self.write_propagation_model(f, categorized_nodes)
        
        # Add links
        self.write_links(f, links, nodes)
        
        # Add plot graph for wireless
        self.write_plot_graph(f, categorized_nodes)
        
        # Start network
        self.write_network_startup(f, categorized_nodes)
        
        # Add 5G specific startup sequences
        self.write_5g_startup_sequences(f, categorized_nodes)
        
        # Add CLI and cleanup
        self.write_cli_and_cleanup(f)

    def write_network_initialization(self, f, categorized_nodes):
        """Write network initialization code."""
        if (categorized_nodes['aps'] or categorized_nodes['ues'] or categorized_nodes['gnbs'] or 
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    net = Mininet_wifi(topo=None,\n')
            f.write('                       build=False,\n')
            f.write('                       link=wmediumd, wmediumd_mode=interference,\n')
            f.write('                       ipBase=\'10.0.0.0/8\')\n')
        else:
            f.write('    net = Mininet(topo=None, build=False, ipBase=\'10.0.0.0/8\')\n')
        f.write('    \n')

    def write_controllers(self, f, categorized_nodes):
        """Write controller creation code."""
        if categorized_nodes['controllers']:
            f.write('    info( \'\\n*** Adding controller\\n\' )\n')
            for controller in categorized_nodes['controllers']:
                props = controller.get('properties', {})
                ctrl_name = self.sanitize_variable_name(controller['name'])
                ctrl_ip = props.get('Controller_IPAddress', '127.0.0.1')
                ctrl_port = props.get('Controller_Port', 6633)
                
                f.write(f'    {ctrl_name} = net.addController(name=\'{ctrl_name}\',\n')
                f.write(f'                           controller=RemoteController,\n')
                f.write(f'                           ip=\'{ctrl_ip}\',\n')
                f.write(f'                           port={ctrl_port})\n')
            f.write('\n')
        else:
            f.write('    info( \'\\n*** Adding controller\\n\' )\n')
            f.write('    c0 = net.addController(name=\'c0\',\n')
            f.write('                           controller=RemoteController)\n\n')

    def write_aps_and_switches(self, f, categorized_nodes):
        """Write APs and switches creation code."""
        if categorized_nodes['aps'] or categorized_nodes['switches']:
            f.write('    info( \'\\n*** Add APs & Switches\\n\')\n')
            
            # Add APs
            for ap in categorized_nodes['aps']:
                props = ap.get('properties', {})
                ap_name = self.sanitize_variable_name(ap['name'])
                ssid = props.get('AP_SSID', f'{ap_name}-ssid')
                channel = props.get('AP_Channel', '36')
                mode = props.get('AP_Mode', 'a')
                position = f"{ap['x']:.1f},{ap['y']:.1f},0"
                
                f.write(f'    {ap_name} = net.addAccessPoint(\'{ap_name}\', cls=OVSKernelAP, ssid=\'{ssid}\', failMode=\'standalone\', datapath=\'user\',\n')
                f.write(f'                             channel=\'{channel}\', mode=\'{mode}\', position=\'{position}\', protocols="OpenFlow14")\n')
            
            # Add switches
            for switch in categorized_nodes['switches']:
                switch_name = self.sanitize_variable_name(switch['name'])
                f.write(f'    {switch_name} = net.addSwitch(\'{switch_name}\', cls=OVSKernelSwitch, protocols="OpenFlow14")\n')
            
            f.write('\n')

    def write_5g_core_components(self, f, categorized_nodes):
        """Write 5G Core components creation code."""
        # Extract UPF components from 5G Core
        upf_components = []
        amf_components = []
        smf_components = []
        
        for core_comp in categorized_nodes['core5g']:
            props = core_comp.get('properties', {})
            comp_type = props.get('Component5G_Type', 'AMF')
            
            if comp_type == 'UPF':
                upf_components.append(core_comp)
            elif comp_type == 'AMF':
                amf_components.append(core_comp)
            elif comp_type == 'SMF':
                smf_components.append(core_comp)
        
        # Add UPF components
        if upf_components:
            f.write('    info( \'\\n *** Add UPF\\n\')\n')
            for upf in upf_components:
                upf_name = self.sanitize_variable_name(upf['name'])
                position = f"{upf['x']:.1f},{upf['y']:.1f},0"
                config_file = f"{upf_name}.yaml"
                
                f.write(f'    {upf_name} = net.addStation(\'{upf_name}\', cap_add=["net_admin"], network_mode="open5gs-ueransim_default", privileged=True, publish_all_ports=True,\n')
                f.write(f'                          dcmd="/bin/bash",cls=DockerSta, dimage="adaptive/open5gs:1.0", position=\'{position}\', range=116,\n')
                f.write(f'                          volumes=[cwd + "/config/{config_file}:/opt/open5gs/etc/open5gs/upf.yaml"])\n')
            f.write('\n')
        
        # Add AMF components
        if amf_components:
            f.write('    info( \'\\n *** Add AMF\\n\')\n')
            for amf in amf_components:
                amf_name = self.sanitize_variable_name(amf['name'])
                position = f"{amf['x']:.1f},{amf['y']:.1f},0"
                config_file = f"{amf_name}.yaml"
                
                f.write(f'    {amf_name} = net.addStation(\'{amf_name}\', network_mode="open5gs-ueransim_default", cap_add=["net_admin"],  publish_all_ports=True,\n')
                f.write(f'                          dcmd="/bin/bash",cls=DockerSta, dimage="adaptive/open5gs:1.0", position=\'{position}\', range=116,\n')
                f.write(f'                          volumes=[cwd + "/config/{config_file}:/opt/open5gs/etc/open5gs/amf.yaml"])\n')
            f.write('\n')

    def write_gnbs(self, f, categorized_nodes):
        """Write gNB creation code."""
        if categorized_nodes['gnbs']:
            f.write('    info( \'\\n *** Add gNB\\n\')\n')
            for gnb in categorized_nodes['gnbs']:
                props = gnb.get('properties', {})
                gnb_name = self.sanitize_variable_name(gnb['name'])
                position = f"{gnb['x']:.1f},{gnb['y']:.1f},0"
                amf_ip = props.get('GNB_AMF_IP', '10.0.0.3')
                hostname = props.get('GNB_Hostname', f'mn.{gnb_name}')
                mcc = props.get('GNB_MCC', '999')
                mnc = props.get('GNB_MNC', '70')
                sst = props.get('GNB_SST', '1')
                sd = props.get('GNB_SD', '0xffffff')
                tac = props.get('GNB_TAC', '1')
                
                f.write(f'    {gnb_name} = net.addStation(\'{gnb_name}\', cap_add=["net_admin"], network_mode="open5gs-ueransim_default", publish_all_ports=True, \n')
                f.write(f'                          dcmd="/bin/bash",cls=DockerSta, dimage="adaptive/ueransim:1.0", position=\'{position}\', range=116,\n')
                f.write(f'                          environment={{"AMF_IP": "{amf_ip}", "GNB_HOSTNAME": "{hostname}", "N2_IFACE":"{gnb_name}-wlan0", "N3_IFACE":"{gnb_name}-wlan0", "RADIO_IFACE":"{gnb_name}-wlan0",\n')
                f.write(f'                                        "MCC": "{mcc}", "MNC": "{mnc}", "SST": "{sst}", "SD": "{sd}", "TAC": "{tac}"}})\n')
            f.write('\n')

    def write_ues(self, f, categorized_nodes):
        """Write UE creation code."""
        if categorized_nodes['ues']:
            f.write('    info(\'\\n*** Adding docker UE hosts\\n\')\n')
            for i, ue in enumerate(categorized_nodes['ues'], 1):
                props = ue.get('properties', {})
                ue_name = self.sanitize_variable_name(ue['name'])
                position = f"{ue['x']:.1f},{ue['y']:.1f},0"
                gnb_ip = props.get('UE_GNB_IP', '10.0.0.4')
                apn = props.get('UE_APN', 'internet')
                msisdn = props.get('UE_MSISDN', f'00000000{i:02d}')
                mcc = props.get('UE_MCC', '999')
                mnc = props.get('UE_MNC', '70')
                sst = props.get('UE_SST', '1')
                sd = props.get('UE_SD', '0xffffff')
                tac = props.get('UE_TAC', '1')
                key = props.get('UE_Key', '465B5CE8B199B49FAA5F0A2EE238A6BC')
                op_type = props.get('UE_OP_Type', 'OPC')
                op = props.get('UE_OP', 'E8ED289DEBA952E4283B54E88E6183CA')
                
                f.write(f'    {ue_name} = net.addStation(\'{ue_name}\', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode="open5gs-ueransim_default",\n')
                f.write(f'                          dcmd="/bin/bash",cls=DockerSta, dimage="adaptive/ueransim:1.0", position=\'{position}\', \n')
                f.write(f'                          environment={{"GNB_IP": "{gnb_ip}", "APN": "{apn}", "MSISDN": \'{msisdn}\',\n')
                f.write(f'                                        "MCC": "{mcc}", "MNC": "{mnc}", "SST": "{sst}", "SD": "{sd}", "TAC": "{tac}", \n')
                f.write(f'                                        "KEY": "{key}", "OP_TYPE": "{op_type}", "OP": "{op}"}})\n')
            f.write('\n')

    def write_docker_hosts(self, f, categorized_nodes):
        """Write Docker hosts creation code."""
        if categorized_nodes['docker_hosts']:
            f.write('    info(\'\\n*** Adding Docker hosts\\n\')\n')
            for docker_host in categorized_nodes['docker_hosts']:
                props = docker_host.get('properties', {})
                host_name = self.sanitize_variable_name(docker_host['name'])
                position = f"{docker_host['x']:.1f},{docker_host['y']:.1f},0"
                image = props.get('DockerHost_ContainerImage', 'ubuntu:latest')
                
                f.write(f'    {host_name} = net.addStation(\'{host_name}\', dcmd="/bin/bash", cls=DockerSta, dimage="{image}", position=\'{position}\')\n')
            f.write('\n')

    def write_hosts_and_stas(self, f, categorized_nodes):
        """Write regular hosts and STAs creation code."""
        if categorized_nodes['hosts']:
            f.write('    info(\'\\n*** Adding hosts and stations\\n\')\n')
            for host in categorized_nodes['hosts']:
                props = host.get('properties', {})
                host_name = self.sanitize_variable_name(host['name'])
                position = f"{host['x']:.1f},{host['y']:.1f},0"
                ip = props.get('Host_IPAddress') or props.get('STA_IPAddress', '')
                
                if host['type'] == 'STA':
                    f.write(f'    {host_name} = net.addStation(\'{host_name}\', position=\'{position}\'')
                    if ip:
                        f.write(f', ip=\'{ip}\'')
                    f.write(')\n')
                else:
                    f.write(f'    {host_name} = net.addHost(\'{host_name}\'')
                    if ip:
                        f.write(f', ip=\'{ip}\'')
                    f.write(')\n')
            f.write('\n')

    def write_wifi_connections(self, f, categorized_nodes):
        """Write WiFi connection code."""
        if categorized_nodes['ues'] or any(host['type'] == 'STA' for host in categorized_nodes['hosts']):
            f.write('    info( \'\\n*** Connecting Docker nodes to APs\\n\')\n')
            for ue in categorized_nodes['ues']:
                ue_name = self.sanitize_variable_name(ue['name'])
                # Find closest AP (simplified logic)
                if categorized_nodes['aps']:
                    closest_ap = min(categorized_nodes['aps'], 
                                   key=lambda ap: ((ap['x'] - ue['x'])**2 + (ap['y'] - ue['y'])**2)**0.5)
                    ap_name = self.sanitize_variable_name(closest_ap['name'])
                    ap_ssid = closest_ap.get('properties', {}).get('AP_SSID', f'{ap_name}-ssid')
                    f.write(f'    {ue_name}.cmd(\'iw dev {ue_name}-wlan0 connect {ap_ssid}\')\n')
            f.write('\n')

    def write_propagation_model(self, f, categorized_nodes):
        """Write propagation model configuration."""
        if (categorized_nodes['aps'] or categorized_nodes['gnbs'] or 
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    info("\\n*** Configuring Propagation Model\\n")\n')
            f.write('    net.setPropagationModel(model="logDistance", exp=3)\n\n')
            f.write('    info(\'\\n*** Configuring WiFi nodes\\n\')\n')
            f.write('    net.configureWifiNodes()\n\n')

    def write_links(self, f, links, nodes):
        """Write link creation code."""
        if links:
            f.write('    info( \'\\n*** Add links\\n\')\n')
            for link in links:
                source_name = self.sanitize_variable_name(link['source'])
                dest_name = self.sanitize_variable_name(link['destination'])
                
                # Determine link type based on connected components
                source_node = next((n for n in nodes if self.sanitize_variable_name(n['name']) == source_name), None)
                dest_node = next((n for n in nodes if self.sanitize_variable_name(n['name']) == dest_name), None)
                
                if source_node and dest_node:
                    # Use TCLink for connections involving wireless components
                    if (source_node['type'] in ['AP', 'GNB', 'UE', 'STA'] or 
                        dest_node['type'] in ['AP', 'GNB', 'UE', 'STA']):
                        f.write(f'    net.addLink({source_name}, {dest_name}, cls=TCLink)\n')
                    else:
                        f.write(f'    net.addLink({source_name}, {dest_name})\n')
            f.write('\n')

    def write_plot_graph(self, f, categorized_nodes):
        """Write plot graph code for wireless networks."""
        if (categorized_nodes['aps'] or categorized_nodes['gnbs'] or categorized_nodes['ues'] or
            any(h['type'] == 'STA' for h in categorized_nodes['hosts'])):
            f.write('    net.plotGraph(max_x=1000, max_y=1000)\n\n')

    def write_network_startup(self, f, categorized_nodes):
        """Write network startup code."""
        f.write('    info(\'\\n*** Starting network\\n\')\n')
        f.write('    net.build()\n\n')
        
        # Start controllers
        if categorized_nodes['controllers']:
            f.write('    info( \'\\n*** Starting controllers\\n\')\n')
            for controller in categorized_nodes['controllers']:
                ctrl_name = self.sanitize_variable_name(controller['name'])
                f.write(f'    {ctrl_name}.start()\n')
        else:
            f.write('    info( \'\\n*** Starting controllers\\n\')\n')
            f.write('    c0.start()\n')
        f.write('\n')
        
        # Start APs and switches
        if categorized_nodes['aps'] or categorized_nodes['switches']:
            f.write('    info( \'\\n*** Starting APs\\n\')\n')
            controller_name = 'c0'
            if categorized_nodes['controllers']:
                controller_name = self.sanitize_variable_name(categorized_nodes['controllers'][0]['name'])
                
            for ap in categorized_nodes['aps']:
                ap_name = self.sanitize_variable_name(ap['name'])
                f.write(f'    net.get(\'{ap_name}\').start([{controller_name}])\n')
                
            for switch in categorized_nodes['switches']:
                switch_name = self.sanitize_variable_name(switch['name'])
                f.write(f'    net.get(\'{switch_name}\').start([{controller_name}])\n')
            f.write('\n')

    def write_5g_startup_sequences(self, f, categorized_nodes):
        """Write 5G specific startup sequences."""
        # Extract 5G components
        upf_components = [c for c in categorized_nodes['core5g'] 
                         if c.get('properties', {}).get('Component5G_Type') == 'UPF']
        amf_components = [c for c in categorized_nodes['core5g'] 
                         if c.get('properties', {}).get('Component5G_Type') == 'AMF']
        
        if upf_components or amf_components or categorized_nodes['gnbs'] or categorized_nodes['ues']:
            f.write('    info( \'\\n *** Capture all initialization flow and slice packet\\n\')\n')
            f.write('    Capture1 = cwd + "/capture-initialization-fixed.sh"\n')
            f.write('    CLI(net, script=Capture1)\n\n')
            f.write('    CLI.do_sh(net, \'sleep 20\')\n\n')
            f.write('    info( \'\\n *** pingall for testing and flow tables update\\n\')\n')
            f.write('    net.pingAll()\n\n')
            f.write('    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start UPF
            if upf_components:
                f.write('    info( \'\\n *** Post configure Docker UPF connection to Core\\n\')\n')
                for upf in upf_components:
                    upf_name = self.sanitize_variable_name(upf['name'])
                    f.write(f'    makeTerm2({upf_name}, cmd="/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/{upf_name}.log")\n')
                f.write('\n')
            
            # Start AMF
            if amf_components:
                f.write('    info( \'\\n *** Post configure Docker AMF connection to Core\\n\')\n')
                for amf in amf_components:
                    amf_name = self.sanitize_variable_name(amf['name'])
                    f.write(f'    makeTerm2({amf_name}, cmd="open5gs-amfd 2>&1 | tee -a /logging/{amf_name}.log")\n')
                f.write('\n    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start gNBs
            if categorized_nodes['gnbs']:
                f.write('    info( \'\\n*** Post configure Docker gNB connection to AMF\\n\')\n')
                for gnb in categorized_nodes['gnbs']:
                    gnb_name = self.sanitize_variable_name(gnb['name'])
                    f.write(f'    makeTerm2({gnb_name}, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/{gnb_name}.log")\n')
                f.write('\n    CLI.do_sh(net, \'sleep 10\')\n\n')
            
            # Start UEs
            if categorized_nodes['ues']:
                f.write('    info( \'\\n*** Post configure Docker UE nodes\\n\')\n')
                for ue in categorized_nodes['ues']:
                    ue_name = self.sanitize_variable_name(ue['name'])
                    f.write(f'    makeTerm2({ue_name}, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/{ue_name}.log")\n')
                f.write('\n    CLI.do_sh(net, \'sleep 20\')\n\n')
                
                # Add routing for UEs
                f.write('    info( \'\\n ***Route traffic on UE for End-to-End and End-to-Edge Connection\\n\')\n')
                for ue in categorized_nodes['ues']:
                    ue_name = self.sanitize_variable_name(ue['name'])
                    props = ue.get('properties', {})
                    apn = props.get('UE_APN', 'internet')
                    if apn == 'internet':
                        f.write(f'    {ue_name}.cmd(\'ip route add 10.45.0.0/16 dev uesimtun0\')\n')
                    elif apn == 'internet2':
                        f.write(f'    {ue_name}.cmd(\'ip route add 10.46.0.0/16 dev uesimtun0\')\n')
                f.write('\n')

    def write_cli_and_cleanup(self, f):
        """Write CLI and cleanup code."""
        f.write('    info(\'*** Running CLI\\n\')\n')
        f.write('    CLI(net)\n\n')
        f.write('    info(\'*** Stopping network\\n\')\n')
        f.write('    net.stop()\n\n')

    def write_main_execution(self, f):
        """Write the main execution block."""
        f.write('if __name__ == \'__main__\':\n')
        f.write('    setLogLevel(\'info\')\n')
        f.write('    topology(sys.argv)\n')

    def sanitize_variable_name(self, name):
        """Convert component name to valid Python variable name."""
        # Replace spaces and special characters with underscores
        sanitized = re.sub(r'[^a-zA-Z0-9_]', '_', name.lower())
        
        # Ensure it doesn't start with a number
        if sanitized and sanitized[0].isdigit():
            sanitized = 'n_' + sanitized
            
        # Ensure it's not empty
        if not sanitized:
            sanitized = 'unnamed_component'
            
        return sanitized