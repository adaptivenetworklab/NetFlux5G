#!/usr/bin/env python

"""
NetFlux5G - Mininet-WiFi Topology
Generated by NetFlux5G Editor
Generated on: Sen Jul 7 15:27:55 2025
Docker Network: netflux5g

This script creates a network topology using mininet-wifi
with dynamic configuration from the NetFlux5G UI.

Network Mode Configuration:
- All Docker components (UEs, gNBs, 5G Core) use the universal netflux5g network
- Database, WebUI, Monitoring, and Controller services also use netflux5g network
- Current network mode: netflux5g

Docker Network Usage:
- Network Name: netflux5g
- Type: Bridge network with attachable containers
- Create network: docker network create --driver bridge --attachable netflux5g
- Delete network: docker network rm netflux5g
"""

import sys
import os
from mininet.net import Mininet
from mininet.link import TCLink, Link, Intf
from mininet.node import RemoteController, OVSKernelSwitch, Host, Node
from mininet.log import setLogLevel, info
from mn_wifi.net import Mininet_wifi
from mn_wifi.node import Station, OVSKernelAP
from mn_wifi.link import wmediumd, Intf
from mn_wifi.wmediumdConnector import interference
from containernet.cli import CLI
from containernet.node import DockerSta
from containernet.term import makeTerm as makeTerm2
from subprocess import call


def sanitize_name(name):
    """Convert display name to valid Python variable name."""
    import re
    # Remove special characters and spaces
    clean_name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
    # Ensure it starts with a letter or underscore
    if clean_name and clean_name[0].isdigit():
        clean_name = '_' + clean_name
    return clean_name or 'node'

def check_docker_network():
    """Check if the required Docker network exists."""
    import subprocess
    network_name = "netflux5g"
    try:
        result = subprocess.run(
            ["docker", "network", "ls", "--filter", f"name={network_name}", "--format", "{{.Name}}"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            networks = result.stdout.strip().split('\n')
            return network_name in networks
        return False
    except Exception:
        return False

def create_docker_network_if_needed():
    """Create Docker network if it doesn't exist."""
    import subprocess
    network_name = "netflux5g"
    
    if check_docker_network():
        print(f"Docker network '{network_name}' already exists")
        return True
    
    print(f"Creating Docker network: {network_name}")
    try:
        result = subprocess.run(
            ["docker", "network", "create", "--driver", "bridge", "--attachable", network_name],
            capture_output=True, text=True, timeout=30
        )
        if result.returncode == 0:
            print(f"Successfully created Docker network: {network_name}")
            return True
        else:
            print(f"Failed to create Docker network: {result.stderr}")
            return False
    except Exception as e:
        print(f"Error creating Docker network: {e}")
        return False

def topology(args):
    """Create network topology."""
    
    # Setup Docker network
    info("*** Setting up universal Docker network\n")
    create_docker_network_if_needed()
    
    # Universal network mode for all NetFlux5G components
    NETWORK_MODE = "netflux5g"
    info(f"*** Using universal Docker network: {NETWORK_MODE}\n")
    
    net = Mininet_wifi(topo=None,
                       build=False,
                       link=wmediumd, wmediumd_mode=interference,
                       ipBase='10.0.0.0/8')

    info("*** Adding controller\n")
    Controller__1 = net.addController(name='Controller__1',
                                   controller=RemoteController,
                                   ip='127.0.0.1',
                                   port=6633)

    info("*** Creating nodes\n")
    Switch__1 = net.addSwitch('Switch__1', cls=OVSKernelSwitch, protocols="OpenFlow14")
    Switch__2 = net.addSwitch('Switch__2', cls=OVSKernelSwitch, protocols="OpenFlow14")
    Switch__3 = net.addSwitch('Switch__3', cls=OVSKernelSwitch, protocols="OpenFlow14")
    Switch__4 = net.addSwitch('Switch__4', cls=OVSKernelSwitch, protocols="OpenFlow14")
    Switch__5 = net.addSwitch('Switch__5', cls=OVSKernelSwitch, protocols="OpenFlow14")
    Switch__6 = net.addSwitch('Switch__6', cls=OVSKernelSwitch, protocols="OpenFlow14")

    cwd = os.getcwd()  # Current Working Directory

    info("*** Add UPF\n")
    upf1 = net.addStation('upf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/upf.yaml:/opt/open5gs/etc/open5gs/upf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=netflux5g-ryu-controller", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=standalone", "OPENFLOW_PROTOCOLS=OpenFlow14", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6633", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    upf2 = net.addStation('upf2', cap_add=["net_admin"], network_mode=NETWORK_MODE, privileged=True, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/upf2.yaml:/opt/open5gs/etc/open5gs/upf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "ENABLE_NAT=true", "NETWORK_INTERFACE=eth0", "OVS_ENABLED=true", "OVS_CONTROLLER=netflux5g-ryu-controller", "OVS_BRIDGE_NAME=br-open5gs", "OVS_FAIL_MODE=standalone", "OPENFLOW_PROTOCOLS=OpenFlow14", "OVS_DATAPATH=kernel", "CONTROLLER_PORT=6633", "BRIDGE_PRIORITY=32768", "STP_ENABLED=true"])
    info("*** Add AMF\n")
    amf1 = net.addStation('amf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/amf.yaml:/opt/open5gs/etc/open5gs/amf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0", "MCC=999", "MNC=70", "TAC=1", "SST=1", "SD=0xffffff"])
    info("*** Add SMF\n")
    smf1 = net.addStation('smf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/smf.yaml:/opt/open5gs/etc/open5gs/smf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add NRF\n")
    nrf1 = net.addStation('nrf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/nrf.yaml:/opt/open5gs/etc/open5gs/nrf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add SCP\n")
    scp1 = net.addStation('scp1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/scp.yaml:/opt/open5gs/etc/open5gs/scp.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add AUSF\n")
    ausf1 = net.addStation('ausf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/ausf.yaml:/opt/open5gs/etc/open5gs/ausf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add BSF\n")
    bsf1 = net.addStation('bsf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/bsf.yaml:/opt/open5gs/etc/open5gs/bsf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add NSSF\n")
    nssf1 = net.addStation('nssf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/nssf.yaml:/opt/open5gs/etc/open5gs/nssf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add PCF\n")
    pcf1 = net.addStation('pcf1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/pcf.yaml:/opt/open5gs/etc/open5gs/pcf.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDM\n")
    udm1 = net.addStation('udm1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/udm.yaml:/opt/open5gs/etc/open5gs/udm.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])
    info("*** Add UDR\n")
    udr1 = net.addStation('udr1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/open5gs:1.0', position='-612.5,-714.3,0', range=116, volumes=[cwd + "/config/udr.yaml:/opt/open5gs/etc/open5gs/udr.yaml"], environment=["DB_URI=mongodb://mongo/open5gs", "NETWORK_INTERFACE=eth0"])

    info("*** Add gNB\n")
    GNB__2 = net.addStation('GNB__2', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', privileged=True, volumes=["/sys:/sys", "/lib/modules:/lib/modules", "/sys/kernel/debug:/sys/kernel/debug"], position='289.5,-25.2,0', range=300, txpower=25.0, environment={"AMF_IP": "amf1", "GNB_HOSTNAME": "gnb2", "N2_IFACE": "eth0", "N3_IFACE": "eth0", "RADIO_IFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "AP_ENABLED": "true", "AP_SSID": "gnb-hotspot2", "AP_CHANNEL": "6", "AP_MODE": "n", "AP_PASSWD": "", "AP_BRIDGE_NAME": "br-gnb2", "OVS_CONTROLLER": "tcp:netflux5g-ryu-controller:6633", "AP_FAILMODE": "standalone", "OPENFLOW_PROTOCOLS": "OpenFlow14", "AP_DATAPATH": "kernel"})
    GNB__1 = net.addStation('GNB__1', cap_add=["net_admin"], network_mode=NETWORK_MODE, publish_all_ports=True, dcmd="/bin/bash", cls=DockerSta, dimage='adaptive/ueransim:latest', privileged=True, volumes=["/sys:/sys", "/lib/modules:/lib/modules", "/sys/kernel/debug:/sys/kernel/debug"], position='-428.3,-57.2,0', range=300, txpower=25.0, environment={"AMF_IP": "amf1", "GNB_HOSTNAME": "gnb1", "N2_IFACE": "eth0", "N3_IFACE": "eth0", "RADIO_IFACE": "eth0", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "AP_ENABLED": "true", "AP_SSID": "gnb-hotspot1", "AP_CHANNEL": "6", "AP_MODE": "n", "AP_PASSWD": "", "AP_BRIDGE_NAME": "br-gnb", "OVS_CONTROLLER": "tcp:netflux5g-ryu-controller:6633", "AP_FAILMODE": "standalone", "OPENFLOW_PROTOCOLS": "OpenFlow14", "AP_DATAPATH": "kernel"})

    info("*** Adding docker UE hosts\n")
    UE__1 = net.addStation('UE__1', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='-647.8,-104.3,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet", "MSISDN": "0000000001", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__2 = net.addStation('UE__2', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='-467.5,36.0,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet", "MSISDN": "0000000002", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__3 = net.addStation('UE__3', devices=["/dev/net/tun"], cap_add=["net_admin"], range=100.0, txpower=20.0, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='-284.6,133.7,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet2", "MSISDN": "0000000011", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__4 = net.addStation('UE__4', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='72.4,-52.8,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet2", "MSISDN": "0000000012", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__5 = net.addStation('UE__5', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='426.8,-135.4,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet2", "MSISDN": "0000000013", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__6 = net.addStation('UE__6', devices=["/dev/net/tun"], cap_add=["net_admin"], range=116, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='225.5,195.1,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet", "MSISDN": "0000000003", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__7 = net.addStation('UE__7', devices=["/dev/net/tun"], cap_add=["net_admin"], range=100.0, txpower=20.0, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='-253.8,-110.1,0', environment={"GNB_HOSTNAME": "gnb1", "APN": "internet", "MSISDN": "0000000004", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})
    UE__8 = net.addStation('UE__8', devices=["/dev/net/tun"], cap_add=["net_admin"], range=100.0, txpower=20.0, network_mode=NETWORK_MODE, dcmd="/bin/bash", cls=DockerSta, dimage='gradiant/ueransim:3.2.6', position='427.2,152.6,0', environment={"GNB_HOSTNAME": "gnb2", "APN": "internet2", "MSISDN": "0000000014", "MCC": "999", "MNC": "70", "SST": "1", "SD": "0xffffff", "TAC": "1", "KEY": "465B5CE8B199B49FAA5F0A2EE238A6BC", "OP_TYPE": "OPC", "OP": "E8ED289DEBA952E4283B54E88E6183CA", "IMEI": "356938035643803", "IMEISV": "4370816125816151", "TUNNEL_IFACE": "uesimtun0", "RADIO_IFACE": "eth0", "SESSION_TYPE": "IPv4", "PDU_SESSIONS": "1", "MOBILITY_ENABLED": "false"})


    info("*** Configuring nodes\n")
    net.configureNodes()

    info("*** Configuring propagation model\n")
    net.setPropagationModel(model="logDistance", exp=4.5)

    info("*** Creating links\n")
    net.addLink(GNB__1, Switch__1)
    net.addLink(GNB__2, Switch__2)
    net.addLink(Switch__1, Switch__2)
    net.addLink(Switch__4, Switch__2)
    net.addLink(Switch__4, Switch__1)
    net.addLink(Switch__1, Switch__3)
    net.addLink(Switch__3, Switch__4)
    net.addLink(amf1, Switch__3)
    net.addLink(Switch__4, amf1)
    net.addLink(Switch__4, Switch__5)
    net.addLink(Switch__5, Switch__2)
    net.addLink(Controller__1, GNB__1)
    net.addLink(Controller__1, amf1)
    net.addLink(Controller__1, Switch__3)
    net.addLink(Controller__1, Switch__4)
    net.addLink(Controller__1, Switch__1)
    net.addLink(Controller__1, Switch__5)
    net.addLink(Controller__1, Switch__2)
    net.addLink(Controller__1, GNB__2)
    net.addLink(Switch__5, Switch__6)
    net.addLink(Switch__6, Switch__2)
    net.addLink(Switch__1, Switch__6)
    net.addLink(Controller__1, Switch__6)

    if "-p" not in args:
        net.plotGraph(max_x=200, max_y=200)

    info("*** Starting network\n")
    net.build()
    Controller__1.start()

    info("*** Connecting Docker nodes to APs\n")
    # Dynamic UE-to-gNB/AP connection based on canvas positioning and coverage
    # Dynamic UE assignment based on distance and coverage
    # Finding best access point for UE__1 at position (-647.8, -104.3)
    # GNB #2 (GNB) at (289.5, -25.2): distance=940.6m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=224.5m, range=300m
    # UE__1 -> GNB #1 (SSID: gnb-hotspot1, distance: 224.5m)
    # Finding best access point for UE__2 at position (-467.5, 36.0)
    # GNB #2 (GNB) at (289.5, -25.2): distance=759.4m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=101.1m, range=300m
    # UE__2 -> GNB #1 (SSID: gnb-hotspot1, distance: 101.1m)
    # Finding best access point for UE__3 at position (-284.6, 133.7)
    # GNB #2 (GNB) at (289.5, -25.2): distance=595.7m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=238.9m, range=300m
    # UE__3 -> GNB #1 (SSID: gnb-hotspot1, distance: 238.9m)
    # Finding best access point for UE__4 at position (72.4, -52.8)
    # GNB #2 (GNB) at (289.5, -25.2): distance=218.9m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=500.7m, range=300m
    # UE__4 -> GNB #2 (SSID: gnb-hotspot2, distance: 218.9m)
    # Finding best access point for UE__5 at position (426.8, -135.4)
    # GNB #2 (GNB) at (289.5, -25.2): distance=176.1m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=858.6m, range=300m
    # UE__5 -> GNB #2 (SSID: gnb-hotspot2, distance: 176.1m)
    # Finding best access point for UE__6 at position (225.5, 195.1)
    # GNB #2 (GNB) at (289.5, -25.2): distance=229.3m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=700.8m, range=300m
    # UE__6 -> GNB #2 (SSID: gnb-hotspot2, distance: 229.3m)
    # Finding best access point for UE__7 at position (-253.8, -110.1)
    # GNB #2 (GNB) at (289.5, -25.2): distance=549.9m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=182.4m, range=300m
    # UE__7 -> GNB #1 (SSID: gnb-hotspot1, distance: 182.4m)
    # Finding best access point for UE__8 at position (427.2, 152.6)
    # GNB #2 (GNB) at (289.5, -25.2): distance=224.8m, range=300m
    # GNB #1 (GNB) at (-428.3, -57.2): distance=880.8m, range=300m
    # UE__8 -> GNB #2 (SSID: gnb-hotspot2, distance: 224.8m)

    UE__1.cmd("iw dev UE__1-wlan0 connect gnb-hotspot1")
    UE__2.cmd("iw dev UE__2-wlan0 connect gnb-hotspot1")
    UE__3.cmd("iw dev UE__3-wlan0 connect gnb-hotspot1")
    UE__4.cmd("iw dev UE__4-wlan0 connect gnb-hotspot2")
    UE__5.cmd("iw dev UE__5-wlan0 connect gnb-hotspot2")
    UE__6.cmd("iw dev UE__6-wlan0 connect gnb-hotspot2")
    UE__7.cmd("iw dev UE__7-wlan0 connect gnb-hotspot1")
    UE__8.cmd("iw dev UE__8-wlan0 connect gnb-hotspot2")


    info("*** Configuring Propagation Model\n")
    net.setPropagationModel(model="logDistance", exp=3)

    info("*** Configuring WiFi nodes\n")
    net.configureWifiNodes()

    info("*** Add links\n")
    net.plotGraph(max_x=1000, max_y=1000)

    info("*** Starting network\n")
    net.build()

    info("*** Starting controllers\n")
    Controller__1.start()

    info("*** Starting APs\n")
    net.get("Switch__1").start([Controller__1])
    net.get("Switch__2").start([Controller__1])
    net.get("Switch__3").start([Controller__1])
    net.get("Switch__4").start([Controller__1])
    net.get("Switch__5").start([Controller__1])
    net.get("Switch__6").start([Controller__1])

    info("*** Capture all initialization flow and slice packet\n")
    Capture1 = cwd + "/capture-initialization-fixed.sh"
    CLI(net, script=Capture1)

    CLI.do_sh(net, "sleep 20")

    info("*** pingall for testing and flow tables update\n")
    net.pingAll()

    CLI.do_sh(net, "sleep 10")

    info("*** Post configure Docker UPF connection to Core\n")
    makeTerm2(upf1, cmd="/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf1.log")
    makeTerm2(upf2, cmd="/entrypoint.sh open5gs-upfd 2>&1 | tee -a /logging/upf2.log")

    info("*** Post configure Docker AMF connection to Core\n")
    makeTerm2(amf1, cmd="open5gs-amfd 2>&1 | tee -a /logging/amf1.log")

    info("*** Starting NRF components\n")
    makeTerm2(nrf1, cmd="open5gs-nrfd 2>&1 | tee -a /logging/nrf1.log")

    info("*** Starting SCP components\n")
    makeTerm2(scp1, cmd="open5gs-scpd 2>&1 | tee -a /logging/scp1.log")

    info("*** Starting AUSF components\n")
    makeTerm2(ausf1, cmd="open5gs-ausfd 2>&1 | tee -a /logging/ausf1.log")

    info("*** Starting UDM components\n")
    makeTerm2(udm1, cmd="open5gs-udmd 2>&1 | tee -a /logging/udm1.log")

    info("*** Starting UDR components\n")
    makeTerm2(udr1, cmd="open5gs-udrd 2>&1 | tee -a /logging/udr1.log")

    info("*** Starting PCF components\n")
    makeTerm2(pcf1, cmd="open5gs-pcfd 2>&1 | tee -a /logging/pcf1.log")

    info("*** Starting BSF components\n")
    makeTerm2(bsf1, cmd="open5gs-bsfd 2>&1 | tee -a /logging/bsf1.log")

    info("*** Starting NSSF components\n")
    makeTerm2(nssf1, cmd="open5gs-nssfd 2>&1 | tee -a /logging/nssf1.log")

    info("*** Starting SMF components\n")
    makeTerm2(smf1, cmd="open5gs-smfd 2>&1 | tee -a /logging/smf1.log")

    CLI.do_sh(net, "sleep 10")

    info("*** Post configure Docker gNB connection to AMF\n")
    makeTerm2(GNB__2, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__2.log")
    makeTerm2(GNB__1, cmd="/entrypoint.sh gnb 2>&1 | tee -a /logging/GNB__1.log")

    CLI.do_sh(net, "sleep 10")

    info("*** Post configure Docker UE nodes\n")
    makeTerm2(UE__1, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__1.log")
    makeTerm2(UE__2, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__2.log")
    makeTerm2(UE__3, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__3.log")
    makeTerm2(UE__4, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__4.log")
    makeTerm2(UE__5, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__5.log")
    makeTerm2(UE__6, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__6.log")
    makeTerm2(UE__7, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__7.log")
    makeTerm2(UE__8, cmd="/entrypoint.sh ue 2>&1 | tee -a /logging/UE__8.log")

    CLI.do_sh(net, "sleep 20")

    info("*** Route traffic on UE for End-to-End and End-to-Edge Connection\n")
    UE__1.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__2.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__3.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__4.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__5.cmd("ip route add 10.46.0.0/16 dev uesimtun0")
    UE__6.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__7.cmd("ip route add 10.45.0.0/16 dev uesimtun0")
    UE__8.cmd("ip route add 10.46.0.0/16 dev uesimtun0")

    info("*** Running CLI\n")
    CLI(net)

    info("*** Stopping network\n")
    net.stop()

    info("*** Running CLI\n")
    CLI(net)

    info("*** Stopping network\n")
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    topology(sys.argv)
